// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  account_id                       Int      @id @default(autoincrement())
  account_provider                 Provider @default(credentials)
  account_refresh_token            String?  @db.Text
  account_refresh_token_expires_in Int?
  account_access_token             String?  @db.Text
  account_expires_at               Int?
  account_id_token                 String?  @db.Text
  account_user                     User     @relation(fields: [account_user_id], references: [user_id], onDelete: Cascade)
  account_user_id                  Int      @unique
  account_two_factor_auth          Boolean?
  account_two_factor_code          Int?
}

enum Provider {
  google
  github
  credentials
}

model Session {
  session_id            Int      @id @default(autoincrement())
  session_user_Id       Int
  session_expires       DateTime
  session_session_token String   @unique
  session_access_token  String   @unique
  session_createdAt     DateTime @default(now())
  session_updatedAt     DateTime @updatedAt
  session_user          User     @relation(fields: [session_user_Id], references: [user_id], onDelete: Cascade)
}

model User {
  user_id                      Int                       @id @default(autoincrement())
  user_name                    String?
  user_email                   String?                   @unique
  user_email_verified          Boolean?
  user_image                   String?
  user_createdAt               DateTime                  @default(now())
  user_updatedAt               DateTime                  @updatedAt
  user_account                 Account?
  user_sessions                Session[]
  user_password                String
  user_fundraiser_contributors Fundraiser_contributors[]
  user_project_comments        Project_Comments[]
  user_project_sub_comments    Project_Sub_comments[]
  user_verificationCode        String?
  user_projects                Project[]
}

model Project {
  project_id          Int                 @id @default(autoincrement())
  project_title       String
  project_description String              @db.VarChar(1000)
  project_deadline    String?
  project_banner      String
  project_video       String
  project_likes       Int                 @default(0)
  project_shares      Int                 @default(0)
  project_published   Boolean             @default(false)
  Project_Fundraising Project_Fundraiser?
  Project_Comments    Project_Comments[]
  Project_Analytics   Project_Analytics?
  project_images      Project_images[]
  project_user        User                @relation(fields: [project_user_id], references: [user_id], onDelete: Cascade)
  project_user_id     Int
}

model Project_images {
  image_id         Int     @id @default(autoincrement())
  image_string     String
  image_project    Project @relation(fields: [image_project_id], references: [project_id], onDelete: Cascade)
  image_project_id Int
}

model Project_Fundraiser {
  fundraiser_id                  Int                       @id @default(autoincrement())
  fundraiser_goal                Int                       @default(0)
  fundraiser_amount_raised       Int                       @default(0)
  fundraiser_percentage_achieved Int                       @default(0)
  fundraiser_contributors        Fundraiser_contributors[]
  fundraiser_project             Project                   @relation(fields: [fundraiser_project_id], references: [project_id], onDelete: Cascade)
  fundraiser_project_id          Int                       @unique
  fundraiser_rewards             Fundraiser_rewards[]
}

model Fundraiser_contributors {
  user          User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id       Int
  fundraiser    Project_Fundraiser @relation(fields: [fundraiser_id], references: [fundraiser_id], onDelete: Cascade)
  fundraiser_id Int
  assignedAt    DateTime           @default(now())
  assignedBy    String

  @@id([user_id, fundraiser_id])
}

model Fundraiser_rewards {
  rewards_id                 Int                @id @default(autoincrement())
  rewards_title              String
  rewards_descriprion        String
  reward_type                Reward_Type
  rewards_in_stock           Int?
  rewards_amount_requirement Int
  fundraiser                 Project_Fundraiser @relation(fields: [fundraiser_id], references: [fundraiser_id], onDelete: Cascade)
  fundraiser_id              Int
}

enum Reward_Type {
  merchandise
  early_access
  perks
}

model Project_Comments {
  comments_id           Int                    @id @default(autoincrement())
  comments_project      Project                @relation(fields: [comments_project_id], references: [project_id], onDelete: Cascade)
  comments_project_id   Int
  comments_user         User                   @relation(fields: [comments_user_id], references: [user_id], onDelete: Cascade)
  comments_user_id      Int
  comments_sub_comments Project_Sub_comments[]
}

model Project_Sub_comments {
  sub_comments_id         Int              @id @default(autoincrement())
  sub_comments_comment    Project_Comments @relation(fields: [sub_comments_comment_id], references: [comments_id], onDelete: Cascade)
  sub_comments_comment_id Int
  sub_comments_user       User             @relation(fields: [sub_comments_user_id], references: [user_id], onDelete: Cascade)
  sub_comments_user_id    Int
}

model Project_Analytics {
  analytics_id              Int     @id @default(autoincrement())
  analytics_number_of_views Int     @default(0)
  analytics_engagement_rate Int     @default(0)
  analytics_conversion_rate Int     @default(0)
  analytics_project         Project @relation(fields: [analytics_project_id], references: [project_id], onDelete: Cascade)
  analytics_project_id      Int     @unique
}
